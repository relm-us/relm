import { World } from "~/types/hecs/World";
import { Component } from "hecs";
import { DeepDiff } from "deep-diff";

import * as Y from "yjs";
import {
  withArrayEdits,
  withMapEdits,
  YEntities,
  YEntity,
  YMeta,
  YChildren,
  YComponents,
  YComponent,
  YValues,
  YValue,
  YIDSTR,
  HECSID,
  yIdToString,
  yEntityToJSON,
  yComponentToJSON,
  yComponentsToJSON,
  jsonToYEntity,
  isEntityAttribute,
  findInYArray,
} from "./y-utils";
import EventEmitter from "eventemitter3";
import { uuidv4 } from "~/utils/uuid";

const UNDO_CAPTURE_TIMEOUT = 50;

type Entity = any;

class YComponentManager {
  yEntityManager: YEntityManager;
  ycomponent: YComponent;

  constructor(yEntityManager: YEntityManager, ycomponent: YComponent) {
    this.yEntityManager = yEntityManager;
    this.ycomponent = ycomponent;
  }

  update(key, value) {
    // const component = new Component(null, values);
    // createYComponent(this.ycomponents, Component.name, component.toJSON());
  }
}
class YEntityManager {
  worldDoc: WorldDoc;

  yentity: YEntity;
  ychildren: YChildren;
  ymeta: YMeta;
  ycomponents: YComponents;

  ycomponentManagers: WeakMap<YComponent, YComponentManager>;

  constructor(worldDoc: WorldDoc) {
    this.worldDoc = worldDoc;
  }

  initYEntity() {
    this.yentity = new Y.Map();
    this.ychildren = new Y.Array();
    this.ymeta = new Y.Map();
    this.ycomponents = new Y.Array();

    this.ycomponentManagers = new WeakMap();

    return this.yentity;
  }

  setYEntity(yentity) {
    this.yentity = yentity;
    this.ychildren = yentity.get("children") as YChildren;
    this.ymeta = yentity.get("meta") as YMeta;
    this.ycomponents = yentity.get("components") as YComponents;

    this.ycomponentManagers = new WeakMap();

    return this.yentity;
  }

  create(name: string, id: string = uuidv4()) {
    if (!this.worldDoc.isTransacting()) {
      throw new Error(`Must wrap 'create' inside transact()`);
    }
    if (!this.yentity) {
      throw new Error(`Must first initYEntity or setYEntity`);
    }

    this.worldDoc.entities.push([this.yentity]);

    this.yentity.set("id", id);
    this.yentity.set("name", name);
    this.yentity.set("parent", null);
    this.yentity.set("children", this.ychildren);
    this.yentity.set("meta", this.ymeta);
    this.yentity.set("components", this.ycomponents);
  }

  get(Component) {
    const ycomponent = findInYArray(
      this.ycomponents,
      (ycomponent) => ycomponent.get("name") === Component.name
    );
    return this.getOrCreateYComponentManager(ycomponent);
  }

  getOrCreateYComponentManager(ycomponent) {
    let mgr = this.ycomponentManagers.get(ycomponent);
    if (!mgr) {
      mgr = new YComponentManager(this, ycomponent);
    }
    return mgr;
  }

  add(Component, values) {
    if (!this.worldDoc.isTransacting()) {
      throw new Error(`Must wrap 'add' inside transact()`);
    }

    const component = new Component(null, values);
    createYComponent(this.ycomponents, Component.name, component.toJSON());

    return this;
  }

  remove(Component) {
    if (!this.worldDoc.isTransacting()) {
      throw new Error(`Must wrap 'add' inside transact()`);
    }

    findInYArray(
      this.ycomponents,
      (ycomponent) => ycomponent.get("name") === Component.name,
      (_ycomponent, i) => this.ycomponents.delete(i, 1)
    );

    return this;
  }

  //TODO: setParent, getParents, getChildren, activate(?)
}

function createYComponent(
  ycomponents: YComponents,
  componentName: string,
  componentAttrs: object
) {
  const ycomponent: YComponent = new Y.Map();

  ycomponents.push([ycomponent]);

  ycomponent.set("name", componentName);

  const yvalues: YValues = new Y.Map();
  ycomponent.set("values", yvalues);

  for (const [key, prop] of Object.entries(componentAttrs)) {
    // console.log("createYComponent yvalues", key, prop);
    yvalues.set(key, prop as YValue);
  }

  return ycomponent;
}

/*
worldDoc.transact((doc) => {
  doc
    .create("Box")
    .add(Transform, {
      position: new Vector3(1, 2, 3),
      scale: new Vector3(2, 2, 2),
    })
    .add(Shape, {
      kind: "SPHERE",
      sphereRadius: 1,
    });
});
worldDoc.transact((doc) => {
  const entity = doc.getById("0:1");
  entity.add(Collider, {
    shape: "BOX",
    boxSize: new Vector3(1, 1, 1),
  });
  const shape = entity.get(Shape);
  shape.update("kind", "BOX");
});
*/
export function addYComponentsToEntity(entity, ycomponents: YComponents) {
  for (const ycomponent of ycomponents) {
    const name = ycomponent.get("name");
    const yvalues: YValues = ycomponent.get("values") as YValues;

    const Component = entity.world.components.getByName(name);
    if (!Component) {
      throw new Error(`Component not found: ${name}`);
    }
    // TODO: Optimize toJSON/fromJSON shortcut
    entity.add(Component, undefined, true).fromJSON(yvalues.toJSON());
  }
}
